/*
 * File:   main_lab5_pote.c
 * Author: Israel Arevalo
 *
 * Created on 28 de febrero de 2020, 03:50 AM
 */

#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)



#include <xc.h>
#include <stdint.h>
#include "ADC.h"
#include "I2C.h"

void init (void);
void inter_init (void);

uint8_t res;
uint8_t temp;

void __interrupt() inter(void)
{
//Interrupci贸n del ADC
    if (PIR1bits.ADIF == 1){
        res = ADRESH;
        PORTA = res;
        PIR1bits.ADIF = 0;
        __delay_ms(5);
        iniciar_adc();
    }
    
}

void main(void) {
    init();
    inter_init();
    
    //I2C_Slave_Init(0x80);//para el potenciometro
    I2C_Slave_Init(0x70);//para la foto
    iniciar_adc();//se inicia la conversi贸n ADC
    while(1);
    return;
}

/*//////////////////////////////////////
 * Funci贸n de configuraci贸n de puertos
 */////////////////////////////////////
void init (void)
{
    ANSEL = 0x00;
    ANSELHbits.ANS12 = 1;
    //TRISA = 0x00;
    TRISB = 0xFF;
    PORTB = 0;
    TRISA = 0x00;
    //TRISC = 0x00;
    //TRISD = 0x00;
    //TRISE = 0x00;
}

void inter_init (void)
{
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
    PIE1bits.ADIE = 1;
    adc_conf(0b00000000, 0b01110001);
}
